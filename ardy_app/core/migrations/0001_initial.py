# Generated by Django 3.2.25 on 2025-05-26 08:23

import core.models.project
import core.models.user
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('Customer', 'Customer'), ('Consultant', 'Consultant'), ('Interior Designer', 'Interior Designer'), ('Construction', 'Construction'), ('Maintenance', 'Maintenance'), ('Smart_Home', 'Smart_Home'), ('Admin', 'Admin')], max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format : '+99999999999'. Up to 14 digits allowed.", regex='^\\+?1?\\d{9,14}$')])),
                ('is_active', models.BooleanField(default=True)),
                ('first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('news_letter', models.BooleanField(default=False)),
                ('offers_and_discounts', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CompanyProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('file', models.FileField(upload_to=core.models.project.general_document_upload_path)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LandDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('land_area_in_sq_ft', models.DecimalField(decimal_places=2, max_digits=10)),
                ('location', models.CharField(max_length=255)),
                ('building_in_sq_ft', models.DecimalField(decimal_places=2, max_digits=10)),
                ('survey_number', models.CharField(blank=True, max_length=100, null=True)),
                ('building_type', models.CharField(choices=[('G+0', 'G+0'), ('G+1', 'G+1'), ('G+2', 'G+2'), ('G+3', 'G+3'), ('G+4', 'G+4'), ('G+5', 'G+5'), ('G+6', 'G+6'), ('G+7', 'G+7'), ('G+8', 'G+8'), ('Tower', 'Tower')], max_length=50)),
                ('is_approved', models.BooleanField(default=False)),
                ('attachments', models.FileField(blank=True, null=True, upload_to=core.models.project.land_attachment_upload_path)),
            ],
        ),
        migrations.CreateModel(
            name='Phase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='e.g Design, Foundation, Electrical Work', max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('order', models.PositiveIntegerField(default=0, help_text='Execution order of the phase')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Accepted', 'Accepted'), ('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Cancelled', 'Cancelled'), ('Rejected', 'Rejected')], default='Pending', max_length=100)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('expected_end_date', models.DateTimeField(blank=True, null=True)),
                ('actual_end_date', models.DateTimeField(blank=True, null=True)),
                ('customer_attachement', models.ManyToManyField(blank=True, related_name='phase_customer_attachement', to='core.Document')),
            ],
            options={
                'ordering': ['project', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Projects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Accepted', 'Accepted'), ('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Cancelled', 'Cancelled'), ('Rejected', 'Rejected')], default='Pending', max_length=200)),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expected_end_date', models.DateTimeField(blank=True, null=True)),
                ('actual_end_date', models.DateTimeField(blank=True, null=True)),
                ('active_phase', models.ForeignKey(blank=True, help_text='The currently active phase of the project', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.phase')),
                ('land_detail', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project', to='core.landdetail')),
                ('project_manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Projects',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('category', models.CharField(choices=[('Customer', 'Customer'), ('Consultant', 'Consultant'), ('Interior Designer', 'Interior Designer'), ('Construction', 'Construction'), ('Maintenance', 'Maintenance'), ('Smart_Home', 'Smart_Home'), ('Admin', 'Admin')], max_length=50)),
                ('default_order', models.PositiveIntegerField(default=1000, help_text='Default order in a standard project lifecycle (lower numbers first). Use unique numbers for standard flow.')),
                ('is_standard_phase_service', models.BooleanField(default=False, help_text='Include this service type when setting up standard project phases?')),
                ('default_phase_title_template', models.CharField(blank=True, help_text="Template for the phase title, e.g., 'Initial {} Design'. '{}' will be project title.", max_length=150, null=True)),
                ('default_phase_description_template', models.TextField(blank=True, help_text="Template for the phase description. '{}' will be project title.", null=True)),
            ],
            options={
                'ordering': ['default_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SubPromoCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('discount_percentage', models.DecimalField(decimal_places=2, max_digits=5)),
                ('max_uses', models.IntegerField(default=1)),
                ('uses', models.IntegerField(default=0)),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_date', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('user_type', models.CharField(choices=[('1', 'Customer'), ('2', 'Service Provider')], max_length=50)),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('features', models.JSONField(default=dict, help_text='JSON structure for features')),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomerProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='core.user')),
                ('budget', models.IntegerField(blank=True, default=0)),
                ('property_status', models.CharField(blank=True, max_length=100)),
                ('project_details', models.TextField(blank=True)),
                ('attachments', models.FileField(blank=True, upload_to=core.models.user.customer_attachement_upload_path)),
            ],
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('status_reason', models.CharField(blank=True, max_length=50, null=True)),
                ('plan', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='core.subscriptionplan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_history', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('phase', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Completed', 'Completed')], max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('payee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transaction_receiver', to=settings.AUTH_USER_MODEL)),
                ('payer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transaction_maker', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.projects')),
            ],
        ),
        migrations.CreateModel(
            name='SmartHomeProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(blank=True, max_length=100)),
                ('expertise', models.CharField(blank=True, max_length=100)),
                ('experience', models.IntegerField(blank=True, help_text='YYears of experience', null=True)),
                ('portfolio', models.URLField(blank=True, null=True)),
                ('introduction', models.TextField(blank=True)),
                ('projects_completed', models.IntegerField(blank=True, null=True)),
                ('company_profile', models.FileField(blank=True, null=True, upload_to=core.models.user.company_profile_upload_path, verbose_name='Company Profile Document')),
                ('service_offered', models.ManyToManyField(blank=True, help_text='Select the services you offer.', related_name='smarthomeprofile_providers', to='core.ServiceType')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Referral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('reward', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('is_redeemed', models.BooleanField(default=False)),
                ('referred_user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='referred_by', to=settings.AUTH_USER_MODEL)),
                ('referrer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referrerals', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Quotation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(default='Initial Quotation', help_text='e.g Initial Design, Construction Bid', max_length=100)),
                ('details', models.TextField(null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Accepted', 'Accepted'), ('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Cancelled', 'Cancelled'), ('Rejected', 'Rejected')], default='Pending', max_length=50)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('phase', models.ForeignKey(blank=True, help_text='Quotation for specific phase', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='quotations', to='core.phase')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quotations', to='core.projects')),
                ('service_provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='given_quotations', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='phase',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='phases', to='core.projects'),
        ),
        migrations.AddField(
            model_name='phase',
            name='required_service_type',
            field=models.ForeignKey(blank=True, help_text=' The primary type of service required for this phase.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.servicetype'),
        ),
        migrations.AddField(
            model_name='phase',
            name='service_provider',
            field=models.ForeignKey(blank=True, help_text='The service provider assigned to this phase.', limit_choices_to={'user_type__in': ['C', 'I', 'C', 'M', 'S']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_phases', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Milestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('due_date', models.DateField()),
                ('completed', models.BooleanField(default=False)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to='core.projects')),
            ],
        ),
        migrations.CreateModel(
            name='MaintenanceProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(blank=True, max_length=100)),
                ('expertise', models.CharField(blank=True, max_length=100)),
                ('experience', models.IntegerField(blank=True, help_text='YYears of experience', null=True)),
                ('portfolio', models.URLField(blank=True, null=True)),
                ('introduction', models.TextField(blank=True)),
                ('projects_completed', models.IntegerField(blank=True, null=True)),
                ('company_profile', models.FileField(blank=True, null=True, upload_to=core.models.user.company_profile_upload_path, verbose_name='Company Profile Document')),
                ('service_offered', models.ManyToManyField(blank=True, help_text='Select the services you offer.', related_name='maintenanceprofile_providers', to='core.ServiceType')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Lead',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed', models.BooleanField(default=False)),
                ('paid', models.BooleanField(default=False)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.projects')),
                ('service_provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='InteriorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(blank=True, max_length=100)),
                ('expertise', models.CharField(blank=True, max_length=100)),
                ('experience', models.IntegerField(blank=True, help_text='YYears of experience', null=True)),
                ('portfolio', models.URLField(blank=True, null=True)),
                ('introduction', models.TextField(blank=True)),
                ('projects_completed', models.IntegerField(blank=True, null=True)),
                ('company_profile', models.FileField(blank=True, null=True, upload_to=core.models.user.company_profile_upload_path, verbose_name='Company Profile Document')),
                ('service_offered', models.ManyToManyField(blank=True, help_text='Select the services you offer.', related_name='interiorprofile_providers', to='core.ServiceType')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FeaturedListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_featured', models.BooleanField(default=False)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EngagementLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EmployeeRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_title', models.CharField(blank=True, max_length=255)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.companyprofile')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('company', 'employee')},
            },
        ),
        migrations.CreateModel(
            name='Drawing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='Untitled Drawing', max_length=255)),
                ('version', models.PositiveIntegerField(default=1)),
                ('file', models.FileField(upload_to=core.models.project.drawing_upload_path)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('phase', models.ForeignKey(blank=True, help_text='Phase this drawing belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='drawings', to='core.phase')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drawings', to='core.projects')),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_drawings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['project', 'phase', '-version'],
            },
        ),
        migrations.AddField(
            model_name='document',
            name='phase',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='phase_documents', to='core.phase'),
        ),
        migrations.AddField(
            model_name='document',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='project_documents', to='core.projects'),
        ),
        migrations.AddField(
            model_name='document',
            name='uploaded_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_project_documents', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ConsultantProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(blank=True, max_length=100)),
                ('expertise', models.CharField(blank=True, max_length=100)),
                ('experience', models.IntegerField(blank=True, help_text='YYears of experience', null=True)),
                ('portfolio', models.URLField(blank=True, null=True)),
                ('introduction', models.TextField(blank=True)),
                ('projects_completed', models.IntegerField(blank=True, null=True)),
                ('company_profile', models.FileField(blank=True, null=True, upload_to=core.models.user.company_profile_upload_path, verbose_name='Company Profile Document')),
                ('service_offered', models.ManyToManyField(blank=True, help_text='Select the services you offer.', related_name='consultantprofile_providers', to='core.ServiceType')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConstructionProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(blank=True, max_length=100)),
                ('expertise', models.CharField(blank=True, max_length=100)),
                ('experience', models.IntegerField(blank=True, help_text='YYears of experience', null=True)),
                ('portfolio', models.URLField(blank=True, null=True)),
                ('introduction', models.TextField(blank=True)),
                ('projects_completed', models.IntegerField(blank=True, null=True)),
                ('company_profile', models.FileField(blank=True, null=True, upload_to=core.models.user.company_profile_upload_path, verbose_name='Company Profile Document')),
                ('service_offered', models.ManyToManyField(blank=True, help_text='Select the services you offer.', related_name='constructionprofile_providers', to='core.ServiceType')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='employees',
            field=models.ManyToManyField(blank=True, related_name='company_employees', through='core.EmployeeRelationship', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='owner',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='company', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='UserOTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(max_length=14, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+9999999999'. Up to 14 digits allowed.", regex='^\\+?1?\\d{9,14}$')])),
                ('email', models.EmailField(max_length=254)),
                ('otp', models.CharField(blank=True, max_length=9, null=True)),
                ('count', models.IntegerField(default=0, help_text='Number of OTP sent')),
                ('otp_type', models.CharField(choices=[('signup', 'Signup'), ('reset_password', 'Reset Password'), ('phone_verification', 'Phone Verification')], default='signup', max_length=20)),
                ('social_login_token', models.CharField(blank=True, default=None, max_length=1000, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='otps', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('phone', 'email')},
            },
        ),
        migrations.CreateModel(
            name='Revision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolved', models.BooleanField(default=False)),
                ('drawing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='revisions', to='core.drawing')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_revisions', to='core.customerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField()),
                ('feedback', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('service_provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.customerprofile')),
            ],
        ),
        migrations.AddField(
            model_name='projects',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='core.customerprofile'),
        ),
        migrations.AlterUniqueTogether(
            name='phase',
            unique_together={('project', 'order')},
        ),
        migrations.AddField(
            model_name='landdetail',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='land_details', to='core.customerprofile'),
        ),
    ]
